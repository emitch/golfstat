import os, sys, scipy
import numpy as np
import matplotlib.pyplot as plt
from parsedata import gather
from sklearn.linear_model import LinearRegression, Lasso, Ridge
from sklearn.cross_validation import LeaveOneOut

def rank_correlation(stats, rankings):
	""" calculate the correlation coefficient of each stat with each
	ranking and return them all """
	# get dimensions
	n_stats = stats.shape[1]
	n_rankings = rankings.shape[1]

	# get correlation of each stat/ranking combination
	corr = np.empty([n_stats, n_rankings])
	for i in range(n_stats):
		for j in range(n_rankings):
			corr[i,j], _ = scipy.stats.spearmanr(stats[:,i], rankings[:,j])

	return corr

def ordinal_loo(stats, rankings, model=LinearRegression()):
	""" Perform leave-one-out validation on an ordinal regression """
	n_obs = stats.shape[0]
	n_rankings = rankings.shape[1]
	errs = np.empty([n_obs, n_rankings])

	loo = LeaveOneOut(n_obs)
	for train, test in loo:
		# fit given model
		mod = model
		mod.fit(stats[train, :], rankings[train, i])
		# test on held-out data point
		pred_rank = mod.predict(stats[test])
		errs[test,:] = pred_rank - rankings[test]
		# TODO: better quantification of error

	# TODO: analyze coefficients etc.

	return errs

def stats_over_time(start, end):
	# compute stuff for each year and plot stuff
	for year in range(start, end+1):
		# get the good good
		stats, ranks, stat_names, player_names = gather([str(year)])
		# calculate spearman correlations
		corr = rank_correlation(stats, ranks)

	# TODO: plot correlations at each year (only for top few stats)
	# TODO: make sure same index is same stat in successive years

	# not done yet
	return None

# main
if __name__ == "__main__":
	# Load data generated by main() of parsedata.py
	if not os.path.isfile('stats.csv'):
		raise

	stat_names = np.genfromtxt('stat_names.csv', delimiter=',', dtype=str)
	stats = np.genfromtxt('stats.csv', delimiter=',', dtype=float)
	ranks = np.genfromtxt('ranks.csv', delimiter=',', dtype=float)

	# calculate correlations
	rank_corrs = rank_correlation(stats, ranks)

	# sort by correlation with all-around ranking
	sorted_indices = np.argsort(np.absolute(rank_corrs[:,0]))[::-1]
	rank_corrs = rank_corrs[sorted_indices,:]
	stat_names = stat_names[sorted_indices]

	print('%38s:\tSpearman Correlation per Ranking' % 'stat')
	for stat, corr in zip(stat_names, rank_corrs):
		print('%38s:\t% .3f\t% .3f\t% .3f' % (stat, corr[0], corr[1], corr[2]))
